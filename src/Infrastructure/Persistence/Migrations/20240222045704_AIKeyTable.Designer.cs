// <auto-generated />
using System;
using AcademyKit.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240222045704_AIKeyTable")]
    partial class AIKeyTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AcademyKit.Domain.Entities.AIKey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("key");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.ToTable("AIKeys");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Assessment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<int>("AssessmentStatus")
                        .HasColumnType("int")
                        .HasColumnName("assessment_status");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("end_date");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("message");

                    b.Property<int>("Retakes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("retake");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<int>("Weightage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("weightage");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentOptions", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssessmentQuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_question_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("option");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("AssessmentOptions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentQuestion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssessmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<string>("Hints")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("hints");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AssessmentQuestion");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentResult", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssessmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_id");

                    b.Property<string>("AssessmentSubmissionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_submission_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<decimal>("NegativeMark")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("negative_mark");

                    b.Property<decimal>("TotalMark")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("total_mark");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("AssessmentSubmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("AssessmentResult");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentSubmission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssessmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsSubmissionError")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_submission_error");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_time");

                    b.Property<string>("SubmissionErrorMessage")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("submission_error_message");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("AssessmentSubmission");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentSubmissionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssessmentQuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_question_id");

                    b.Property<string>("AssessmentSubmissionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_submission_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<string>("SelectedAnswers")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("selected_answers");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentQuestionId");

                    b.HasIndex("AssessmentSubmissionId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AssessmentSubmissionAnswer");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Assignment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("description");

                    b.Property<string>("Hints")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("hints");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("lesson_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LessonId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentAttachment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assignment_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("file_url");

                    b.Property<string>("MimeType")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AssignmentAttachments");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentQuestionOption", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assignment_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("option");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AssignmentQuestionOptions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentReview", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("lesson_id");

                    b.Property<decimal>("Mark")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("mark");

                    b.Property<string>("Review")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("review");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignmentReviews");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentSubmission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("answer");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assignment_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("lesson_id");

                    b.Property<string>("SelectedOption")
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)")
                        .HasColumnName("selected_option");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignmentSubmissions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentSubmissionAttachment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssignmentSubmissionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assignment_submission_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("file_url");

                    b.Property<string>("MimeType")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentSubmissionId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AssignmentSubmissionAttachments");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("end_date");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("image_url");

                    b.Property<string>("Institute")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("institute");

                    b.Property<string>("Location")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("OptionalCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("optional_cost");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("content");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CommentReply", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("comment_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("CommentReplies");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("end_date");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsUnlimitedEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_unlimited_end_date");

                    b.Property<bool>("IsUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_update");

                    b.Property<int>("Language")
                        .HasColumnType("int")
                        .HasColumnName("language");

                    b.Property<string>("LevelId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("level_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("LevelId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CourseCertificate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("event_end_date");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("event_start_date");

                    b.Property<string>("SampleUrl")
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("sample_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("title");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.ToTable("CourseCertificate");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CourseEnrollment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("ActivityReason")
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR(1000)")
                        .HasColumnName("activity_reason");

                    b.Property<DateTime?>("CertificateIssuedDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("certificate_issued_date");

                    b.Property<string>("CertificateUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("certificate_url");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("CurrentLessonId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("current_lesson_id");

                    b.Property<int>("CurrentLessonWatched")
                        .HasColumnType("int")
                        .HasColumnName("current_lesson_watched");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("deleted_on");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("enrollment_date");

                    b.Property<int>("EnrollmentMemberStatus")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<bool?>("HasCertificateIssued")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_certificate_issued");

                    b.Property<ulong>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(0ul)
                        .HasColumnName("is_deleted");

                    b.Property<int>("Percentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("percentage");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurrentLessonId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CourseTag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("tag_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TagId");

                    b.ToTable("CourseTags");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CourseTeacher", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseTeachers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("slug");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.EligibilityCreation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssessmentId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_id");

                    b.Property<string>("CompletedAssessmentId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("completed_assessment_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("department_id");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("group_id");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("SkillId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("skill_id");

                    b.Property<string>("TrainingId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("training_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("CompletedAssessmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SkillId");

                    b.HasIndex("TrainingId");

                    b.ToTable("EligibilityCreations");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("lesson_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LessonId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.FeedbackQuestionOption", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("FeedbackId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("feedback_id");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("option");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackQuestionOptions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.FeedbackSubmission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("answer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("FeedbackId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("feedback_id");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("lesson_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("SelectedOption")
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)")
                        .HasColumnName("selected_option");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackSubmissions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.GeneralSetting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("company_address");

                    b.Property<string>("CompanyContactNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("company_contact_number");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("company_name");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("CustomConfiguration")
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("custom_configuration");

                    b.Property<string>("EmailSignature")
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR(1000)")
                        .HasColumnName("email_signature");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("GeneralSettings");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Group", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("slug");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.GroupFile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("name");

                    b.Property<double>("Size")
                        .HasColumnType("double");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupFiles");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.GroupMember", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Lesson", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("description");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("document_url");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_mandatory");

                    b.Property<string>("MeetingId")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("meeting_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("QuestionSetId")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_set_id");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("section_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("thumbnail_url");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("VideoKey")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("video_key");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("video_url");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MeetingId")
                        .IsUnique();

                    b.HasIndex("QuestionSetId")
                        .IsUnique();

                    b.HasIndex("SectionId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Level", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("slug");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Exception")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<string>("Level")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<DateTime>("Logged")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Logger")
                        .HasColumnType("VARCHAR(400)");

                    b.Property<string>("MachineName")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Message")
                        .HasColumnType("VARCHAR(4000)");

                    b.Property<string>("Properties")
                        .HasColumnType("VARCHAR(1000)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Meeting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<long?>("MeetingNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("meeting_number");

                    b.Property<string>("Passcode")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("passcode");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_date");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("ZoomLicenseId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("zoom_license_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ZoomLicenseId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.MeetingReport", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time(6)")
                        .HasColumnName("duration");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("join_time");

                    b.Property<DateTime?>("LeftTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("left_time");

                    b.Property<string>("MeetingId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("meeting_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingReports");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.PhysicalLessonReview", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("HasAttended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("hasAttended");

                    b.Property<bool>("IsReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_reviewed");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("lesson_id");

                    b.Property<string>("ReviewMessage")
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("review_message");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("PhysicalLessonReviews");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<string>("Hints")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("hints");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2)
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionOption", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("option");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionPool", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(105)")
                        .HasColumnName("slug");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("QuestionPools");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionPoolQuestion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_id");

                    b.Property<string>("QuestionPoolId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_pool_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionPoolId");

                    b.ToTable("QuestionPoolQuestions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionPoolTeacher", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("QuestionPoolId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_pool_id");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2)
                        .HasColumnName("role");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPoolId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionPoolTeachers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<int>("AllowedRetake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("allowed_retake");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsShuffle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_shuffle");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("name");

                    b.Property<decimal>("NegativeMarking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,4)")
                        .HasDefaultValue(0m)
                        .HasColumnName("negative_marking");

                    b.Property<int>("NoOfQuestion")
                        .HasColumnType("int")
                        .HasColumnName("no_of_question");

                    b.Property<decimal>("PassingWeightage")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("passing_weightage");

                    b.Property<decimal>("QuestionMarking")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("question_marking");

                    b.Property<bool>("ShowAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("show_all");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(520)
                        .HasColumnType("VARCHAR(520)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_time");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("QuestionSets");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetQuestion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("QuestionId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_id");

                    b.Property<string>("QuestionPoolQuestionId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_pool_question_id");

                    b.Property<string>("QuestionSetId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_set_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionPoolQuestionId");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("QuestionSetQuestions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetResult", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<decimal>("NegativeMark")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("negative_mark");

                    b.Property<string>("QuestionSetId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_set_id");

                    b.Property<string>("QuestionSetSubmissionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_set_submission_id");

                    b.Property<decimal>("TotalMark")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("total_mark");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.HasIndex("QuestionSetSubmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionSetResults");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetSubmission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsSubmissionError")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_submission_error");

                    b.Property<string>("QuestionSetId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_set_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("DATETIME")
                        .HasColumnName("start_time");

                    b.Property<string>("SubmissionErrorMessage")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("submission_error_message");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionSetSubmissions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetSubmissionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_correct");

                    b.Property<string>("QuestionSetQuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_set_question_id");

                    b.Property<string>("QuestionSetSubmissionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_set_submission_id");

                    b.Property<string>("SelectedAnswers")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("selected_answers");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionSetQuestionId");

                    b.HasIndex("QuestionSetSubmissionId");

                    b.ToTable("QuestionSetSubmissionAnswers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionTag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("question_id");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("tag_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionTags");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("device_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("location");

                    b.Property<DateTime>("LoginAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("login_at");

                    b.Property<string>("Token")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("token");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.SMTPSetting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<int>("MailPort")
                        .HasColumnType("int")
                        .HasColumnName("mail_port");

                    b.Property<string>("MailServer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("mail_server");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("password");

                    b.Property<string>("ReplyTo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("reply_to");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("sender_email");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("sender_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<bool>("UseSSL")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("SMTPSettings");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Section", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Signature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("designation");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("file_url");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Signature");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Skills", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("remarks");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.SkillsCriteria", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("AssessmentId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("assessment_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("percentage");

                    b.Property<int>("SkillAssessmentRule")
                        .HasColumnType("int")
                        .HasColumnName("skill_assessment_rule");

                    b.Property<string>("SkillId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("skill_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillsCriteria");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("slug");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.TrainingEligibility", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("EligibilityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("eligibility_id");

                    b.Property<string>("TrainingEligibilityEnum")
                        .IsRequired()
                        .HasMaxLength(270)
                        .HasColumnType("VARCHAR(270)")
                        .HasColumnName("training_eligibility_enum");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TrainingEligibility");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("address");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("bio");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("hash_password");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MemberId")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("member_id");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("middle_name");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("PasswordChangeToken")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("password_change_token");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("password_reset_token");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("DATETIME")
                        .HasColumnName("password_reset_token_expiry");

                    b.Property<string>("Profession")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("profession");

                    b.Property<string>("PublicUrls")
                        .HasMaxLength(2000)
                        .HasColumnType("VARCHAR(2000)")
                        .HasColumnName("public_urls");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4)
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.UserSkills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SkillsId")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("SkillsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.VideoQueue", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("lesson_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("video_url");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("VideoQueue");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.WatchHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<bool>("IsPassed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_passed");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("lesson_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchHistories");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.ZoomLicense", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("host_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LicenseEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("license_email");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ZoomLicenses");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.ZoomSetting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsRecordingEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_recording_enabled");

                    b.Property<string>("OAuthAccountId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("oauth_account_id");

                    b.Property<string>("OAuthClientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("oauth_client_id");

                    b.Property<string>("OAuthClientSecret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("oauth_client_secret");

                    b.Property<string>("SdkKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("sdk_key");

                    b.Property<string>("SdkSecret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("sdk_secret");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("DATETIME")
                        .HasColumnName("updated_on");

                    b.Property<string>("WebHookSecret")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("webhook_secret");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ZoomSettings");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Assessment", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Assessments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentOptions", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.AssessmentQuestion", "AssessmentQuestion")
                        .WithMany("AssessmentOptions")
                        .HasForeignKey("AssessmentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssessmentOptions")
                        .HasForeignKey("UserId");

                    b.Navigation("AssessmentQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentQuestion", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentResult", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.AssessmentSubmission", "AssessmentSubmission")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("AssessmentSubmissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("AssessmentSubmission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentSubmission", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentSubmissions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssessmentSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentSubmissionAnswer", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.AssessmentQuestion", "AssessmentQuestion")
                        .WithMany("AssessmentSubmissionAnswers")
                        .HasForeignKey("AssessmentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.AssessmentSubmission", "AssessmentSubmission")
                        .WithMany("AssessmentSubmissionAnswers")
                        .HasForeignKey("AssessmentSubmissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssessmentSubmissionAnswers")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssessmentQuestion");

                    b.Navigation("AssessmentSubmission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Assignments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentAttachment", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Assignment", "Assignment")
                        .WithMany("AssignmentAttachments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssignmentAttachments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentQuestionOption", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Assignment", "Assignment")
                        .WithMany("AssignmentQuestionOptions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssignmentQuestionOptions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentReview", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany("AssignmentReviews")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssignmentReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentSubmission", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Assignment", "Assignment")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentSubmissionAttachment", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.AssignmentSubmission", "AssignmentSubmission")
                        .WithMany("AssignmentSubmissionAttachments")
                        .HasForeignKey("AssignmentSubmissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("AssignmentSubmissionAttachments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssignmentSubmission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Comment", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CommentReply", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Comment", "Comment")
                        .WithMany("CommentReplies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("CommentReplies")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Course", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Group", "Group")
                        .WithMany("Courses")
                        .HasForeignKey("GroupId");

                    b.HasOne("AcademyKit.Domain.Entities.Level", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CourseCertificate", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithOne("CourseCertificate")
                        .HasForeignKey("AcademyKit.Domain.Entities.CourseCertificate", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("CourseCertificates")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CourseEnrollment", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CurrentLessonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CourseTag", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("CourseTags")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("CourseTags")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Tag", "Tag")
                        .WithMany("CourseTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.CourseTeacher", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Department", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Departments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.EligibilityCreation", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Assessment", "Assessment")
                        .WithMany("EligibilityCreations")
                        .HasForeignKey("AssessmentId");

                    b.HasOne("AcademyKit.Domain.Entities.Assessment", "CompletedAssessment")
                        .WithMany("EligibilityCreationsCompleted")
                        .HasForeignKey("CompletedAssessmentId");

                    b.HasOne("AcademyKit.Domain.Entities.Department", "Department")
                        .WithMany("EligibilityCreations")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("AcademyKit.Domain.Entities.Group", "Group")
                        .WithMany("EligibilityCreations")
                        .HasForeignKey("GroupId");

                    b.HasOne("AcademyKit.Domain.Entities.Skills", "Skills")
                        .WithMany("EligibilityCreations")
                        .HasForeignKey("SkillId");

                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("EligibilityCreations")
                        .HasForeignKey("TrainingId");

                    b.Navigation("Assessment");

                    b.Navigation("CompletedAssessment");

                    b.Navigation("Course");

                    b.Navigation("Department");

                    b.Navigation("Group");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.FeedbackQuestionOption", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("FeedbackQuestionOptions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackQuestionOptions")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.FeedbackSubmission", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackSubmissions")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("FeedbackSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.GeneralSetting", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("GeneralSettings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Group", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.GroupFile", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("GroupStorages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Group", "Group")
                        .WithMany("GroupFiles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Lessons")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Meeting", "Meeting")
                        .WithOne("Lesson")
                        .HasForeignKey("AcademyKit.Domain.Entities.Lesson", "MeetingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AcademyKit.Domain.Entities.QuestionSet", "QuestionSet")
                        .WithOne("Lesson")
                        .HasForeignKey("AcademyKit.Domain.Entities.Lesson", "QuestionSetId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AcademyKit.Domain.Entities.Section", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Meeting");

                    b.Navigation("QuestionSet");

                    b.Navigation("Section");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Level", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Levels")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Meeting", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Meetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.ZoomLicense", "ZoomLicense")
                        .WithMany("Meetings")
                        .HasForeignKey("ZoomLicenseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("ZoomLicense");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.MeetingReport", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Meeting", "Meeting")
                        .WithMany("MeetingReports")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("MeetingReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.PhysicalLessonReview", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany("physicalLessonReviews")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Question", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionOption", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionPool", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionPools")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionPoolQuestion", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionPoolQuestions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Question", "Question")
                        .WithMany("QuestionPoolQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.QuestionPool", "QuestionPool")
                        .WithMany("QuestionPoolQuestions")
                        .HasForeignKey("QuestionPoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuestionPool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionPoolTeacher", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.QuestionPool", "QuestionPool")
                        .WithMany("QuestionPoolTeachers")
                        .HasForeignKey("QuestionPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionPoolTeachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionPool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSet", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionSets")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetQuestion", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionSetQuestions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Question", "Question")
                        .WithMany("QuestionSetQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AcademyKit.Domain.Entities.QuestionPoolQuestion", "QuestionPoolQuestion")
                        .WithMany("QuestionSetQuestions")
                        .HasForeignKey("QuestionPoolQuestionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AcademyKit.Domain.Entities.QuestionSet", "QuestionSet")
                        .WithMany("QuestionSetQuestions")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuestionPoolQuestion");

                    b.Navigation("QuestionSet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetResult", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.QuestionSet", "QuestionSet")
                        .WithMany("QuestionSetResults")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.QuestionSetSubmission", "QuestionSetSubmission")
                        .WithMany("QuestionSetResults")
                        .HasForeignKey("QuestionSetSubmissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionSetResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionSet");

                    b.Navigation("QuestionSetSubmission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetSubmission", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.QuestionSet", "QuestionSet")
                        .WithMany("QuestionSetSubmissions")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionSetSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionSet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetSubmissionAnswer", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionSetSubmissionAnswers")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.QuestionSetQuestion", "QuestionSetQuestion")
                        .WithMany()
                        .HasForeignKey("QuestionSetQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.QuestionSetSubmission", "QuestionSetSubmission")
                        .WithMany("QuestionSetSubmissionAnswers")
                        .HasForeignKey("QuestionSetSubmissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionSetQuestion");

                    b.Navigation("QuestionSetSubmission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionTag", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("QuestionTags")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Question", "Question")
                        .WithMany("QuestionTags")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.SMTPSetting", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("SMTPSettings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Section", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Sections")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Signature", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("Signatures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Signatures")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.SkillsCriteria", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Assessment", "Assessment")
                        .WithMany("SkillsCriteria")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AcademyKit.Domain.Entities.Skills", "SkillType")
                        .WithMany("SkillsCriteria")
                        .HasForeignKey("SkillId");

                    b.Navigation("Assessment");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Tag", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.TrainingEligibility", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("TrainingEligibilities")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.User", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.UserSkills", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Skills", "Skills")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillsId");

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skills");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.VideoQueue", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.WatchHistory", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.Course", "Course")
                        .WithMany("WatchHistories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.Lesson", "Lesson")
                        .WithMany("WatchHistories")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("WatchHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.ZoomLicense", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("ZoomLicenses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.ZoomSetting", b =>
                {
                    b.HasOne("AcademyKit.Domain.Entities.User", "User")
                        .WithMany("ZoomSettings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Assessment", b =>
                {
                    b.Navigation("AssessmentQuestions");

                    b.Navigation("AssessmentResults");

                    b.Navigation("AssessmentSubmissions");

                    b.Navigation("EligibilityCreations");

                    b.Navigation("EligibilityCreationsCompleted");

                    b.Navigation("SkillsCriteria");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentQuestion", b =>
                {
                    b.Navigation("AssessmentOptions");

                    b.Navigation("AssessmentSubmissionAnswers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssessmentSubmission", b =>
                {
                    b.Navigation("AssessmentResults");

                    b.Navigation("AssessmentSubmissionAnswers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Assignment", b =>
                {
                    b.Navigation("AssignmentAttachments");

                    b.Navigation("AssignmentQuestionOptions");

                    b.Navigation("AssignmentSubmissions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.AssignmentSubmission", b =>
                {
                    b.Navigation("AssignmentSubmissionAttachments");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Comment", b =>
                {
                    b.Navigation("CommentReplies");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseCertificate");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseTags");

                    b.Navigation("CourseTeachers");

                    b.Navigation("EligibilityCreations");

                    b.Navigation("Lessons");

                    b.Navigation("Sections");

                    b.Navigation("Signatures");

                    b.Navigation("TrainingEligibilities");

                    b.Navigation("WatchHistories");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Department", b =>
                {
                    b.Navigation("EligibilityCreations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackQuestionOptions");

                    b.Navigation("FeedbackSubmissions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Group", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("EligibilityCreations");

                    b.Navigation("GroupFiles");

                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("AssignmentReviews");

                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("Assignments");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("WatchHistories");

                    b.Navigation("physicalLessonReviews");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Level", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Meeting", b =>
                {
                    b.Navigation("Lesson");

                    b.Navigation("MeetingReports");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("QuestionPoolQuestions");

                    b.Navigation("QuestionSetQuestions");

                    b.Navigation("QuestionTags");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionPool", b =>
                {
                    b.Navigation("QuestionPoolQuestions");

                    b.Navigation("QuestionPoolTeachers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionPoolQuestion", b =>
                {
                    b.Navigation("QuestionSetQuestions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSet", b =>
                {
                    b.Navigation("Lesson");

                    b.Navigation("QuestionSetQuestions");

                    b.Navigation("QuestionSetResults");

                    b.Navigation("QuestionSetSubmissions");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.QuestionSetSubmission", b =>
                {
                    b.Navigation("QuestionSetResults");

                    b.Navigation("QuestionSetSubmissionAnswers");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Section", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Skills", b =>
                {
                    b.Navigation("EligibilityCreations");

                    b.Navigation("SkillsCriteria");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.Tag", b =>
                {
                    b.Navigation("CourseTags");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.User", b =>
                {
                    b.Navigation("AssessmentOptions");

                    b.Navigation("AssessmentQuestions");

                    b.Navigation("AssessmentResults");

                    b.Navigation("AssessmentSubmissionAnswers");

                    b.Navigation("AssessmentSubmissions");

                    b.Navigation("Assessments");

                    b.Navigation("AssignmentAttachments");

                    b.Navigation("AssignmentQuestionOptions");

                    b.Navigation("AssignmentReviews");

                    b.Navigation("AssignmentSubmissionAttachments");

                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("Assignments");

                    b.Navigation("Certificates");

                    b.Navigation("CommentReplies");

                    b.Navigation("Comments");

                    b.Navigation("CourseCertificates");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseTags");

                    b.Navigation("CourseTeachers");

                    b.Navigation("Courses");

                    b.Navigation("Departments");

                    b.Navigation("FeedbackQuestionOptions");

                    b.Navigation("FeedbackSubmissions");

                    b.Navigation("Feedbacks");

                    b.Navigation("GeneralSettings");

                    b.Navigation("GroupMembers");

                    b.Navigation("GroupStorages");

                    b.Navigation("Groups");

                    b.Navigation("Lessons");

                    b.Navigation("Levels");

                    b.Navigation("MeetingReports");

                    b.Navigation("Meetings");

                    b.Navigation("QuestionOptions");

                    b.Navigation("QuestionPoolQuestions");

                    b.Navigation("QuestionPoolTeachers");

                    b.Navigation("QuestionPools");

                    b.Navigation("QuestionSetQuestions");

                    b.Navigation("QuestionSetResults");

                    b.Navigation("QuestionSetSubmissionAnswers");

                    b.Navigation("QuestionSetSubmissions");

                    b.Navigation("QuestionSets");

                    b.Navigation("QuestionTags");

                    b.Navigation("Questions");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SMTPSettings");

                    b.Navigation("Sections");

                    b.Navigation("Signatures");

                    b.Navigation("Tags");

                    b.Navigation("UserSkills");

                    b.Navigation("WatchHistories");

                    b.Navigation("ZoomLicenses");

                    b.Navigation("ZoomSettings");
                });

            modelBuilder.Entity("AcademyKit.Domain.Entities.ZoomLicense", b =>
                {
                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
